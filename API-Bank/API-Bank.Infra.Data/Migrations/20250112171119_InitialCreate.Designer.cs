// <auto-generated />
using System;
using API_Bank.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIBank.Infra.Data.Migrations
{
    [DbContext(typeof(BankAccountContext))]
    [Migration("20250112171119_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API_Bank.Domain.Entities.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AvailableAmount")
                        .HasColumnType("double")
                        .HasColumnName("Bal_AvailableAmount");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int")
                        .HasColumnName("BaA_BankAccountId");

                    b.Property<double>("BlockedAmount")
                        .HasColumnType("double")
                        .HasColumnName("Bal_BlockedAmount");

                    b.HasKey("BalanceId");

                    b.HasIndex("BankAccountId")
                        .IsUnique();

                    b.ToTable("Bal_Balance", (string)null);
                });

            modelBuilder.Entity("API_Bank.Domain.Entities.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BaA_Branch");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("BaA_CreatedAt");

                    b.Property<string>("HolderDocument")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BaA_HolderDocument");

                    b.Property<string>("HolderEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BaA_HolderEmail");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BaA_HolderName");

                    b.Property<int>("HolderType")
                        .HasColumnType("int")
                        .HasColumnName("BaA_HolderType");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BaA_Number");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("BaA_Status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("BaA_Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("BaA_UpdatedAt");

                    b.HasKey("BankAccountId");

                    b.ToTable("BaA_BankAccount", (string)null);
                });

            modelBuilder.Entity("API_Bank.Domain.Entities.Balance", b =>
                {
                    b.HasOne("API_Bank.Domain.Entities.BankAccount", "BankAccount")
                        .WithOne("Balance")
                        .HasForeignKey("API_Bank.Domain.Entities.Balance", "BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("API_Bank.Domain.Entities.BankAccount", b =>
                {
                    b.Navigation("Balance")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
